{
	"Print to console": {
		// "scope": "javascript,typescript,php,java,css,html,json",//范围
		"prefix": ["tsconfig","typeScriptConfig.json"],
		"body": [
			"{",
			"    \"compilerOptions\": {",
			"     /* Basic Options(基本选项) */",
			"     // \"incremental\": true,                   /* Enable incremental compilation(启用增量编译)*/",
			"     \"target\": \"es5\",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'.(指定ECMAScript目标版本：“ES3”（默认）、“ES5”、“ES2015”、“ES2016”、“ES2017”、“ES2018”、“ES2019”或“ESNEXT”) */",
			"     \"module\": \"commonjs\",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'.(指定模块代码生成：“none”、“commonjs”、“amd”、“system”、“umd”、“es2015”或“ESNext”) */",
			"     // \"lib\": [],                             /* Specify library files to be included in the compilation.(指定要包含在编译中的库文件) */",
			"     // \"allowJs\": true,                       /* Allow javascript files to be compiled.(允许编译javascript文件) */",
			"     // \"checkJs\": true,                       /* Report errors in .js files.(报告.js文件中的错误) */",
			"     // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'.(指定JSX代码生成：“preserve”、“react native”或“react”) */",
			"     // \"declaration\": true,                   /* Generates corresponding '.d.ts' file.(生成相应的“.d.ts”文件) */",
			"     // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file.(为每个对应的“.d.ts”文件生成源映射) */",
			"     // \"sourceMap\": true,                     /* Generates corresponding '.map' file.(生成相应的“.map”文件) */",
			"     // \"outFile\": \"./\",                       /* Concatenate and emit output to single file.(连接并将输出发送到单个文件) */",
			"     // \"outDir\": \"./\",                        /* Redirect output structure to the directory.(将输出结构重定向到目录) */",
			"     // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir.(指定输入文件的根目录。用于使用--outDir控制输出目录结构) */",
			"     // \"composite\": true,                     /* Enable project compilation(启用项目编译) */",
			"     // \"tsBuildInfoFile\": \"./\",               /* Specify file to store incremental compilation information(指定文件以存储增量编译信息) */",
			"     // \"removeComments\": true,                /* Do not emit comments to output.(不向输出发送注释) */",
			"     // \"noEmit\": true,                        /* Do not emit outputs.(不发射输出) */",
			"     // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'.(从“tslib”导入emit helpers) */",
			"     // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'.(在以“ES5”或“ES3”为目标时，为“for of”、“spread”和“destruction”中的iterables提供全面支持) */",
			"     // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule').(将每个文件作为单独的模块进行传输（类似于'传输模块')) */",
			"",  
			"     /* Strict Type-Checking Options(严格的类型检查选项) */",
			"     \"strict\": true,                           /* Enable all strict type-checking options.(启用所有严格类型检查选项) */",
			"     // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type.(对隐含的“any”类型的表达式和声明引发错误) */",
			"     // \"strictNullChecks\": true,              /* Enable strict null checks.(启用严格的空检查) */",
			"     // \"strictFunctionTypes\": true,           /* Enable strict checking of function types.(启用函数类型的严格检查) */",
			"     // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions.(对函数启用严格的“bind”、“call”和“apply”方法) */",
			"     // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes.(对类中的属性初始化启用严格检查) */",
			"     // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type.(使用隐含的“any”类型对“this”表达式引发错误) */",
			"     // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file.(在strict模式下解析并为每个源文件发出“use strict”) */",
			"",  
			"     /* Additional Checks */",
			"     // \"noUnusedLocals\": true,                /* Report errors on unused locals.(未使用的局部变量报告错误) */",
			"     // \"noUnusedParameters\": true,            /* Report errors on unused parameters.(报告未使用参数的错误) */",
			"     // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value.(函数中并非所有代码路径都返回值时报告错误) */",
			"     // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement.(在switch语句中报告失败案例的错误) */",
			"",  
			"     /* Module Resolution Options */",
			"     // \"moduleResolution\": \"node\",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).(指定模块解析策略：“节点”(节点.js)或“经典”（TypeScript 1.6版之前）) */",
			"     // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names.(解析非绝对模块名称的基目录) */",
			"     // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'.(将导入重新映射到相对于“baseUrl”的查找位置的一系列条目) */",
			"     // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime.(根文件夹的列表，其组合内容表示运行时项目的结构) */",
			"     // \"typeRoots\": [],                       /* List of folders to include type definitions from.(包含类型定义的文件夹列表) */",
			"     // \"types\": [],                           /* Type declaration files to be included in compilation.(要包含在编译中的类型声明文件) */",
			"     // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking.(允许从没有默认导出的模块中进行默认导入。这不会影响代码的发出，只会影响类型检查) */",
			"     \"esModuleInterop\": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.(通过为所有导入创建命名空间对象，实现CommonJS和ES模块之间的互操作性。意味着“allowSyntheticDefaultImports(允许合成默认导入)”) */",
			"     // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks.(不要解析符号链接的实际路径) */",
			"     // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules.(允许从模块访问UMD全局参数) */",
			"",
			"     /* Source Map Options */",
			"     // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations.(指定调试器应该定位TypeScript文件而不是源位置的位置) */",
			"     // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations.(指定调试器应定位映射文件而不是生成位置的位置) */",
			"     // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file.(使用源贴图发射单个文件，而不是使用单独的文件) */",
			"     // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set.(在单个文件中，在源映射旁边发出源；需要设置“-inlineSourceMap”或“--sourceMap”) */",
			"",
			"     /* Experimental Options(实验选项) */",
			"     // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators.(支持ES7装饰器的实验性支持) */",
			"     // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators.(为装饰器启用对发出类型元数据的实验支持) */",
			"",
			"     /* Advanced Options(高级选项) */",
			"     \"forceConsistentCasingInFileNames\": true  /* Disallow inconsistently-cased references to the same file.(不允许对同一文件进行大小写不一致的引用) */",
			"   }",
			"  }",
		],
		"description": "typescript配置文件"
	}
}