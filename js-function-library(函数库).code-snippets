{
	"Print to console": {
		// "scope": "javascript,typescript",
		"prefix": ["ku", "fn", "hanshuku"],
		"body": [
      "// npm install --save decimal.js  // 安装",
      "import Decimal from \"decimal.js\";",
      "// 数字千分位",
      "export const numDeal = num => {",
      "  if (!num) return num == 0 ? 0 : \"\";",
      "  let reg = /\\d{1,3}(?=(\\d{3})+\\$)/g;",
      "  let numArr = num.toString().split(\".\");",
      "  let point = numArr[1] ? \".\" + numArr[1] : \"\";",
      "  return numArr[0].replace(reg, \"\\$&,\") + point;",
      "};",
      "// 数字累加",
      "export const numberAdd = function(...args) {",
      "  if (args.length < 2) {",
      "    console.log(\"缺少参数\");",
      "    return \"\";",
      "  }",
      "  let result = 0;",
      "  for (const item of args) {",
      "    result = Decimal(result).add(Decimal(item));",
      "  }",
      "  return result;",
      "};",
      "// 数字相减",
      "export const numberSub = function (a, b) {",
      "  return Decimal(a).sub(Decimal(b));",
      "};",
      "// 数字累乘",
      "export const numberMul = function (...args) {",
      "  if (args.length < 2) {",
      "    console.log(\"缺少参数\");",
      "    return \"\";",
      "  }",
      "  let result = args[0];",
      "  for (const item of args.slice(1)) {",
      "    result = Decimal(result).mul(Decimal(item));",
      "  }",
      "  return result;",
      "};",
      "// 数字相除",
      "export const numberDiv = function (a, b) {",
      "  return Decimal(a).div(Decimal(b));",
      "};",
      "// 价格转换 分-→元",
      "export const priceTransform = function(price) {",
      "  return numberDiv(price, 100)",
      "};",
      "// 分转元价格展示",
      "export const priceShow = function(price) {",
      "  return numDeal(priceTransform(price));",
      "};",
      "// 截取几位小数 digit：截取位数(需要大于等于1)",
      "export function replaceToFixed(num, digit = 2) {",
      "  if (isNaN(Number(num))) {",
      "    return \"\";",
      "  } else {",
      "    const regExp = new RegExp(`^(\\d*)(.\\d{1,\\${digit}})(\\d*)`)",
      "    return String(Number(num)).replace(regExp, \"\\$1\\$2\")",
      "  }",
      "}",
      "// 校验类函数",
      "// 校验字符串中的符号是否闭合",
      "export const brackets = function (origin) {",
      "  if (!Array.prototype.at) {",
      "    // 重写at方法，兼容低版本node，高版本node需删除此处代码",
      "    Array.prototype.at = function (index) {",
      "      const context = this;",
      "      return (",
      "        (index < 0 ? context[context.length + index] : context[index]) ||",
      "        undefined",
      "      );",
      "    };",
      "  }",
      "  const result = [];",
      "  const map = {",
      "    \"{\": \"}\",",
      "    \"[\": \"]\",",
      "    \"(\": \")\"",
      "  };",
      "  for (const item of origin.split(\"\")) {",
      "    if (map[item]) {",
      "      result.push(item);",
      "    } else if (map[result.at(-1)] === item) {",
      "      result.pop();",
      "    }",
      "  }",
      "  return result.length === 0;",
      "}",
		],
		"description": "函数库"
	}
}