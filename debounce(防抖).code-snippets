{
  "Print to console": {
    // "scope": "javascript,typescript",
    "prefix": ["debounce", "fangdou"],
    "body": [
      "// 防抖非立即执行版",
      "function debounce(func, wait) {",
      "  let timeout;",
      "  return function () {",
      "    let context = this;",
      "    let args = arguments;",
      "    timeout && clearTimeout(timeout);",
      "    timeout = setTimeout(() => {",
      "      func.apply(context, args);",
      "    }, wait);",
      "  };",
      "}",
      "// 防抖立即执行版",
      "function debounce(func,wait) {",
      "  let timeout;",
      "  return function () {",
      "    let context = this;",
      "    let args = arguments;",
      "    timeout && clearTimeout(timeout);",
      "    let callNow = !timeout;",
      "    timeout = setTimeout(() => {",
      "        timeout = null;",
      "    }, wait)",
      "    callNow && func.apply(context, args)",
      "  }",
      "}",
      "// 防抖结合版",
      "/**",
      " * @desc 函数防抖",
      " * @param func 函数",
      " * @param wait 延迟执行毫秒数",
      " * @param immediate true 表立即执行，false 表非立即执行",
      " */",
      " function debounce(func, wait, immediate) {",
      "  let timeout;",
      "  return function () {",
      "    let context = this;",
      "    let args = arguments;",
      "    timeout && clearTimeout(timeout);",
      "    if (immediate) {",
      "      var callNow = !timeout;",
      "      timeout = setTimeout(() => {",
      "        timeout = null;",
      "      }, wait);",
      "      callNow && func.apply(context, args);",
      "    } else {",
      "      timeout = setTimeout(function () {",
      "        func.apply(context, args);",
      "      }, wait);",
      "    }",
      "  };",
      "}"
    ],
    "description": "防抖函数：所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。1、非立即执行版。2、立即执行版。3、结合版"
  }
}
