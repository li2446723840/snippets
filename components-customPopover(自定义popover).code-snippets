{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Print to console": {
    // "scope": "javascript,typescript",
    "prefix": ["customPopover", "popover"],
    "body": [
      "<button @click.stop=\"openPopover(\\$event)\">打开popover弹窗</button>",
      "<div class=\"custom-popover\" ref=\"customPopover\">",
      "   <div class=\"custom-popover-content\">",
      "     {{ popoverContent }}",
      "   </div>",
      "</div>",
      "mounted() {",
      "  const handler = () => {",
      "    this.\\$refs.customPopover.style.left = \"-9999px\";",
      "  };",
      "  window.addEventListener(\"click\", handler);",
      "  window.addEventListener(\"scroll\", handler);",
      "  this.\\$once(\"hook:beforeDestroy\", () => {",
      "    window.removeEventListener(\"click\", handler);",
      "    window.removeEventListener(\"scroll\", handler);",
      "  });",
      "},",
      "async openPopover(event) {",
      "  let { code, data, msg } = await getPopoverContent();",
      "  if (code === 2000) {",
      "    this.popoverContent = data;",
      "    this.\\$nextTick(() => {",
      "      let targetDom = event.target;",
      "      let rectObj = targetDom.getBoundingClientRect();",
      "      const domObj = this.\\$refs.customPopover;",
      "      let windowHeight = document.documentElement.clientHeight;",
      "      let left = rectObj.left - 135,",
      "        top = 0;",
      "      let tabHeight = domObj.offsetHeight;",
      "       // 如果弹窗的高度大于距离浏览器下边框的高度，则展示在上面",
      "      if (tabHeight > windowHeight - rectObj.bottom) {",
      "        top = rectObj.bottom - tabHeight - 32;",
      "        domObj.classList.add(\"custom-popover-top\");",
      "      } else {",
      "        top = rectObj.bottom + 20;",
      "        domObj.classList.remove(\"custom-popover-top\");",
      "      }",
      "      let cssStr = `left: \\${left}px;top: \\${top}px;`;",
      "      domObj.style.cssText = cssStr;",
      "    });",
      "  }",
      "}",
      ".custom-popover {",
      "  color: skyblue",
      "  position: fixed;",
      "  width: 328px;",
      "  z-index: 999;",
      "  left: -9999px;",
      "  box-shadow: 0 0 10px #e4e4e4;",
      "  .phone-pop-table {",
      "    position: relative;",
      "    width: 100%;",
      "    box-sizing: border-box;",
      "    padding: 20px;",
      "    background-color: #ffffff;",
      "    border-radius: 8px;",
      "    z-index: 10;",
      "  }",
      "  .custom-popover-content {",
      "    position: relative;",
      "    width: 100%;",
      "    box-sizing: border-box;",
      "    padding: 20px;",
      "    background-color: #ffffff;",
      "    border-radius: 8px;",
      "    z-index: 10;",
      "  }",
      "  \\&:after {",
      "    content: \"\";",
      "    width: 35px;",
      "    height: 35px;",
      "    background-color: #fff;",
      "    box-shadow: 0 0 10px #e4e4e4;",
      "    position: absolute;",
      "    left: 50%;",
      "    transform: translateX(-50%) rotate(45deg);",
      "    top: -5px;",
      "  }",
      "}",
      ".custom-popover-top {",
      "  &:after {",
      "    top: initial;",
      "    bottom: -5px;",
      "  }",
      "}"
    ],
    "description": "自定义popover弹窗"
  }
}
