{
  "Print to console": {
    // "scope": "javascript,typescript",
    "prefix": ["input", "scopeInput", "customInput"],
    "body": [
      "<template>",
      "  <div class=\"scope-input-component\" :style=\"{ width: typeof width === 'number' ? width + 'px' : width }\">",
      "    <div class=\"custom-input\" :style=\"{ 'border-color': borderColor }\">",
      "      <input",
      "        type=\"text\"",
      "        :value=\"minNum\"",
      "        ref=\"minNum\"",
      "        :style=\"{ width: inputWidth }\"",
      "        :maxlength=\"maxlength\"",
      "        @input=\"handleChange('minNum')\"",
      "        @focus=\"handleFocus\"",
      "        @blur=\"handleBlur\"",
      "      />",
      "      <span ref=\"connectiveWord\" class=\"connective-word\">{{ connector }}</span>",
      "      <input",
      "        type=\"text\"",
      "        :value=\"maxNum\"",
      "        ref=\"maxNum\"",
      "        :style=\"{ width: inputWidth }\"",
      "        :maxlength=\"maxlength\"",
      "        @input=\"handleChange('maxNum')\"",
      "        @focus=\"handleFocus\"",
      "        @blur=\"handleBlur\"",
      "      />",
      "      <div ref=\"suffix\" class=\"suffix\" :style=\"{ 'padding-left': suffixText ? '10px' : 'initial' }\">",
      "        {{ suffixText }}",
      "      </div>",
      "    </div>",
      "    <div class=\"hint\">",
      "      <span v-if=\"isRule && isHint\">{{ hintText }}</span>",
      "    </div>",
      "  </div>",
      "</template>",
      "<script>",
      "export default {",
      "  name: \"scopeInputComponent\",",
      "  props: {",
      "    value: {",
      "      type: Array,",
      "      default() {",
      "        return [];",
      "      }",
      "    },",
      "    width: {",
      "      type: [Number, String],",
      "      default: 200",
      "    },",
      "    maxlength: {",
      "      type: [Number, String],",
      "      default: \"\"",
      "    },",
      "    regular: {",
      "      type: RegExp,",
      "      default() {",
      "        return /^(-|\\+)?(\\d{1,8})?(\\.\\d{0,2})?$/;",
      "      }",
      "    },",
      "    hintText: {",
      "      type: String,",
      "      default: \"请输入正确格式\"",
      "    },",
      "    // 后缀",
      "    suffixText: {",
      "      type: String,",
      "      default: \"\"",
      "    },",
      "    // 连接符",
      "    connector: {",
      "      type: String,",
      "      default: \"~\"",
      "    },",
      "    // 是否校验左侧需小于右侧",
      "    isRule: {",
      "      type: Boolean,",
      "      default: true",
      "    }",
      "  },",
      "  data() {",
      "    return {",
      "      flag: true, // 兼容中文输入",
      "      inputFocus: false, // true:输入框聚焦 false:输入框失焦",
      "      isHint: false, // 是否提示",
      "      inputWidth: \"\" // input输入框的宽度，通过计算获得",
      "    };",
      "  },",
      "  computed: {",
      "    borderColor() {",
      "      if (this.inputFocus) {",
      "        return \"#409eff !important\";",
      "      } else if (this.isRule && this.isHint) {",
      "        return \"#F56C6C !important\";",
      "      } else {",
      "        return \"#DCDFE6\";",
      "      }",
      "    },",
      "    minNum: {",
      "      get() {",
      "        return (typeof Number(this.value[0]) === \"number\" && !isNaN(this.value[0])) || [\"+\", \"-\"].includes(this.value[0])  ? this.value[0] : \"\";",
      "      },",
      "      set(val) {",
      "        this.\\$emit(\"update:value\", [val, this.maxNum]);",
      "      }",
      "    },",
      "    maxNum: {",
      "      get() {",
      "        return (typeof Number(this.value[1]) === \"number\" && !isNaN(this.value[1])) || [\"+\", \"-\"].includes(this.value[1]) ? this.value[1] : \"\";",
      "      },",
      "      set(val) {",
      "        this.\\$emit(\"update:value\", [this.minNum, val]);",
      "      }",
      "    }",
      "  },",
      "  mounted() {",
      "    // 60 = custom-input左右的padding + connective-word左右的padding + suffix的padding-left",
      "    let countWidth =",
      "      (this.width - this.\\$refs.connectiveWord.clientWidth - this.\\$refs.suffix.clientWidth - this.suffixText ? 60 : 50) /",
      "      2;",
      "    this.inputWidth = countWidth + \"px\";",
      "    // 兼容中文输入",
      "    this.\\$refs[\"minNum\"].addEventListener(\"compositionstart\", (a, b) => {",
      "      this.flag = false;",
      "    });",
      "    this.\\$refs[\"minNum\"].addEventListener(\"compositionend\", (a, b) => {",
      "      this.flag = true;",
      "    });",
      "    this.\\$refs[\"maxNum\"].addEventListener(\"compositionstart\", (a, b) => {",
      "      this.flag = false;",
      "    });",
      "    this.\\$refs[\"maxNum\"].addEventListener(\"compositionend\", (a, b) => {",
      "      this.flag = true;",
      "    });",
      "  },",
      "  methods: {",
      "    handleFocus() {",
      "      this.inputFocus = true;",
      "      if (!this.isRule) return;",
      "      this.isHint = false;",
      "    },",
      "    handleBlur() {",
      "      this.inputFocus = false;",
      "      if (!this.isRule) return;",
      "      if (this.minNum && this.maxNum) {",
      "        if (Number(this.minNum) > Number(this.maxNum)) {",
      "          this.isHint = true;",
      "        } else {",
      "          this.isHint = false;",
      "        }",
      "      }",
      "    },",
      "    handleChange(key) {",
      "      // 为什么使用延时器？ 因为选词结束的时候input会比compositionend先一步触发，此时flag还未调整为true，所以不能触发到console，故用setTimeout将其优先级滞后。",
      "      setTimeout(() => {",
      "        if (this.flag) {",
      "          let value = this.\\$refs[key].value;",
      "          let ruleRes = this.regular.test(value);",
      "          if (value === \"\" || ruleRes) {",
      "            this[key] = value;",
      "          } else {",
      "            this.\\$refs[key].value = this[key];",
      "          }",
      "        }",
      "      }, 0);",
      "    }",
      "  }",
      "};",
      "</script>",
      "<style lang=\"less\" scoped>",
      ".scope-input-component {",
      "  display: flex;",
      "  flex-wrap: wrap;",
      "  position: relative;",
      "  .custom-input {",
      "    padding: 0 15px;",
      "    width: 100%;",
      "    display: flex;",
      "    align-items: center;",
      "    justify-content: space-between;",
      "    height: 28px;",
      "    border: 1px solid #dcdfe6;",
      "    border-radius: 3px;",
      "    box-sizing: border-box;",
      "    input {",
      "      flex: 1;",
      "      border: none;",
      "      box-sizing: border-box;",
      "      outline: none;",
      "      color: #606266;",
      "      font-size: inherit;",
      "    }",
      "    .connective-word {",
      "      flex-shrink: 0;",
      "      font-size: 12px;",
      "      padding: 0 10px;",
      "    }",
      "    &:hover {",
      "      border-color: #c0c4cc !important;",
      "    }",
      "    .suffix {",
      "      flex-shrink: 0;",
      "      font-size: 12px;",
      "      white-space: nowrap;",
      "    }",
      "  }",
      "  .hint {",
      "    position: absolute;",
      "    left: 0;",
      "    bottom: -15px;",
      "    line-height: 1;",
      "    font-size: 12px;",
      "    color: #f56c6c;",
      "  }",
      "}",
      "</style>",
    ],
    "description": "范围输入框"
  }
}
