{
	"Print to console": {
		// "scope": "javascript,typescript",
		"prefix": [
			"reduce"
		],
		"body": [
			"//简单用法",
			"var  arr = [1, 2, 3, 4];",
			"var sum = arr.reduce((x,y)=>x+y)//求和，10",
			"var mul = arr.reduce((x,y)=>x*y)//求乘积，24",
			"//高级用法",
			"//1、计算数组中每个元素出现的次数",
			"let names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];",
			"let nameNum = names.reduce((pre,cur)=>{",
			"  if(cur in pre){//遍历上次回调返回的对象，判断当前值是否在对象中",
			"    pre[cur]++   //在上次的对象中，该属性值加一",
			"  }else{",
			"    pre[cur] = 1  //添加一个新属性，属性值为1",
			"  }",
			"  return pre;     //返回处理后的对象",
			"},{})           //初始值为一个空对象",
			"console.log(nameNum); //{Alice: 2, Bob: 1, Tiff: 1, Bruce: 1}",
			"//2、数组去重",
			"let arr = [1,2,3,4,4,1]",
			"let newArr = arr.reduce((pre,cur)=>{",
			"    if(!pre.includes(cur)){//判断当前元素是否在返回值中",
			"      return pre.concat(cur);//当不在返回值时，合并当前元素",
			"    }else{",
			"      return pre;  //返回之前的返回值",
			"    }",
			"},[]);",
			"console.log(newArr);// [1, 2, 3, 4]",
			"//3、将二维数组转化为一维",
			"let arr = [[0, 1], [2, 3], [4, 5]]",
			"let newArr = arr.reduce((pre,cur)=>{",
			"    return pre.concat(cur);//数组的合并",
			"},[])",
			"console.log(newArr); // [0, 1, 2, 3, 4, 5]",
			"//4、将多维数组转化为一维",
			"//Array.isArray() 用于确定传递的值是否是一个数组",
			"let arr = [[0, 1], [2, 3], [4,[5,6,7]]]",
			"const newArr = function(arr){",
			"   return arr.reduce((pre,cur)=>pre.concat(Array.isArray(cur)?newArr(cur):cur),[])",
			"}",
			"console.log(newArr(arr)); //[0, 1, 2, 3, 4, 5, 6, 7]",
		],
		"description": "reduce的用法"
	}
}