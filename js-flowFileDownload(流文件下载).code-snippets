{
  "Print to console": {
    // "scope": "javascript,typescript",
    "prefix": ["file", "download", "flowFile", "flowFileDownLoad"],
    "body": [
      "// 下载文件",
      "downloadFile() {",
      "  let loadInstance = this.\\$loading(); // element Loading",
      "  let url = \"http://www.baidu.com\";",
      "  axios({",
      "    method: \"post\",",
      "    url: url,",
      "    timeout: 3000,",
      "    headers: {",
      "      Authorization: \"BearerToken\"",
      "    },",
      "    responseType: \"blob\"",
      "  })",
      "    .then(res => {",
      "      const data = res.data;",
      "      // 有可能下载失败，返回{code: '500'},但responseType: 'blob'会把data强制转为blob，导致下载undefined.excel",
      "      // 解决：将已转为blob类型的data转回json格式，判断是否下载成功",
      "      let r = new FileReader();",
      "      // 1：FileReader : 读取文件内容",
      "      // readAsText() 读取文本文件，(可以使用Txt打开的文件)",
      "      // readAsBinaryString(): 读取任意类型的文件，返回二进制字符串",
      "      // readAsDataURL: 方法可以将读取到的文件编码成DataURL ，可以将资料(例如图片、excel文件)内嵌在网页之中，不用放到外部文件",
      "      // abort: 中断读取",
      "      // 2：FileReader 提供一个完整的事件模型，用来捕获读取文件的状态",
      "      // onabort:读取文件断片时触发",
      "      // onerror:读取文件错误时触发",
      "      // onload:文件读取成功时触发",
      "      // onloadend:文件读取完毕之后，不管成功还是失败触发",
      "      // onloadstart: 开始读取文件时触发",
      "      // onprogress:读取文件过程中触发",
      "      r.onload = function () {",
      "        // 如果JSON.parse(this.result)不报错，说明this.result是json字符串，是下载报错情况的返回值。",
      "        // 如果JSON.parse(this.result)报错，说明下载成功，进入catch",
      "        try {",
      "          let { code, data, msg } = JSON.parse(this.result); // this.result为FileReader获取blob数据转换为json后的数据，即后台返回的原始数据",
      "          console.log(code, data, msg);",
      "        } catch (err) {",
      "          let fileName = res.headers[\"content-disposition\"];",
      "          // 获取文件名",
      "          if (fileName && fileName.length >= 2) {",
      "            fileName = fileName.split(\"=\")[1];",
      "          }",
      "          fileName = decodeURIComponent(fileName);",
      "          // 兼容ie11",
      "          if (window.navigator.msSaveOrOpenBlob) {",
      "            try {",
      "              const blobObject = new Blob([data]);",
      "              window.navigator.msSaveOrOpenBlob(blobObject, fileName);",
      "            } catch (e) {",
      "              console.log(e);",
      "            }",
      "            return;",
      "          }",
      "          let url = window.URL.createObjectURL(new Blob([data]));",
      "          let aTag = document.createElement(\"a\");",
      "          aTag.style.display = \"none\";",
      "          aTag.href = url;",
      "          aTag.setAttribute(\"download\", fileName); // a标签的download 属性定义了下载链接的地址。同样可以指定下载文件的名称。文件名称没有限定值，浏览器会自动在文件名称末尾添加该下载文件的后缀 (.img, .pdf, .txt, .html, 等)",
      "          document.body.appendChild(aTag);",
      "          aTag.click();",
      "        }",
      "      };",
      "      r.readAsText(data); // FileReader的API",
      "    })",
      "    .catch(() => {",
      "      this.\\$message.error({",
      "        message: \"下载失败\",",
      "        center: true",
      "      });",
      "    })",
      "    .finally(() => {",
      "      loadInstance.close();",
      "    });",
      "}"
    ],
    "description": "流文件下载"
  }
}
