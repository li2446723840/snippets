{
  "Print to console": {
    // "scope": "javascript,typescript",
    "prefix": ["vue3-scopeInput", "scopeInput", "scope-input"],
    "body": [
      "<script setup lang=\"ts\">",
      "  import { PropType } from \"vue\";",
      "  const props = defineProps({",
      "    bindValue: {",
      "      type: Array as PropType<string[] | number[]>,",
      "      default() {",
      "        return [\"\", \"\"];",
      "      },",
      "    },",
      "    regular: {",
      "      type: RegExp,",
      "      default: /^(-|\\+)?(\\d{1,8})?(\\.\\d{0,2})?\\$/,",
      "    },",
      "    // 是否需要校验",
      "    isRule: {",
      "      type: Boolean,",
      "      default: true,",
      "    },",
      "    // 输入框宽度",
      "    width: {",
      "      type: Number,",
      "      default: 0,",
      "    },",
      "    // 最大输入长度",
      "    maxlength: {",
      "      type: [Number, String],",
      "      default: \"\",",
      "    },",
      "    // 提示文案",
      "    // hintText: {",
      "    //   type: String,",
      "    //   default: \"请输入正确格式\",",
      "    // },",
      "    // 后缀",
      "    suffixText: {",
      "      type: String,",
      "      default: \"\",",
      "    },",
      "    // 连接符",
      "    connector: {",
      "      type: String,",
      "      default: \"~\",",
      "    },",
      "    // 组件大小",
      "    size: {",
      "      type: String,",
      "      default: \"default\",",
      "    },",
      "  });",
      "  const emits = defineEmits([\"update:bindValue\", \"ruleFunc\"]);",
      "  const flag = ref(true); // 兼容中文输入",
      "  const inputFocus = ref(false); // true:输入框聚焦 false:输入框失焦",
      "  const isHint = ref(false); // 文字提示是否展示",
      "  const hintText = ref<string>(\"\");",
      "  // 获取dom",
      "  const minNumRef = ref<any>(null); // 左侧输入框",
      "  const maxNumRef = ref<any>(null); // 右侧输入框",
      "  const componentBox = ref<any>(null); // 组件盒子dom",
      "  const connectiveWord = ref<any>(null); // 连接符dom",
      "  const suffix = ref<any>(null); // 后缀dom",
      "  // 样式",
      "  const inputWidth = ref<string>(\"\"); // input输入框的宽度，通过计算获得",
      "  const boxWidth = ref<string>(\"100%\"); // 组件盒子宽度",
      "  const suffixPadding = ref<string>(\"initial\"); // 后缀padding-left",
      "  // 组件大小",
      "  const sizeStyle = computed<string>(() => {",
      "    if (props.size === \"large\") {",
      "      return \"40px\";",
      "    } else if (props.size === \"small\") {",
      "      return \"24px\";",
      "    } else {",
      "      return \"32px\";",
      "    }",
      "  });",
      "  // 左侧输入框绑定值",
      "  const minNumValue = computed<any>({",
      "    get() {",
      "      return props.bindValue[0];",
      "    },",
      "    set(val) {",
      "      emits(\"update:bindValue\", [val, maxNumValue.value]);",
      "    },",
      "  });",
      "  // 右侧输入框绑定值",
      "  const maxNumValue = computed<any>({",
      "    get() {",
      "      return props.bindValue[1];",
      "    },",
      "    set(val) {",
      "      emits(\"update:bindValue\", [minNumValue.value, val]);",
      "    },",
      "  });",
      "  // 输入框背景边框颜色",
      "  const shadowColor = computed<any>(() => {",
      "    return (type: string) => {",
      "      if (inputFocus.value) {",
      "        return \"#409eff\";",
      "      } else if (props.isRule && isHint.value) {",
      "        return \"#F56C6C\";",
      "      } else {",
      "        return type === \"hover\" ? \"#c0c4cc\" : \"#dcdfe6\";",
      "      }",
      "    };",
      "  });",
      "  props.width && (boxWidth.value = props.width + \"px\"); // 如果传入宽度，则使用传入的宽度",
      "  props.suffixText && (suffixPadding.value = \"10px\"); // 如果有后缀，则给后缀添加padding-left",
      "  // 输入框聚焦",
      "  function handleFocus() {",
      "    inputFocus.value = true;",
      "    if (!props.isRule) return;",
      "    isHint.value = false;",
      "  }",
      "  // 输入框失焦",
      "  function handleBlur() {",
      "    inputFocus.value = false;",
      "    if (!props.isRule) return;",
      "    function callback(error) {",
      "      if (error) {",
      "        if (error instanceof Error) {",
      "          isHint.value = true;",
      "          hintText.value = error.message;",
      "        } else {",
      "          throw new TypeError(\"回调函数参数类型错误\");",
      "        }",
      "      } else {",
      "        isHint.value = false;",
      "        hintText.value = \"\";",
      "      }",
      "    }",
      "    emits(\"ruleFunc\", [minNumValue.value, maxNumValue.value], callback);",
      "  }",
      "  // 输入框change事件",
      "  function handleChange(type: string) {",
      "    // 为什么使用延时器？ 因为选词结束的时候input会比compositionend先一步触发，此时flag还未调整为true，所以不能触发到console，故用setTimeout将其优先级滞后。",
      "    setTimeout(() => {",
      "      if (flag) {",
      "        let inputVal: any = null;",
      "        let targetVal: any = null;",
      "        if (type === \"minNum\") {",
      "          inputVal = minNumRef;",
      "          targetVal = minNumValue;",
      "        } else if (type === \"maxNum\") {",
      "          inputVal = maxNumRef;",
      "          targetVal = maxNumValue;",
      "        }",
      "        const ruleRes = props.regular.test(inputVal.value.value);",
      "        if (inputVal.value.value === \"\" || ruleRes) {",
      "          targetVal.value = inputVal.value.value;",
      "        } else {",
      "          inputVal.value.value = targetVal.value;",
      "        }",
      "      }",
      "    }, 0);",
      "  }",
      "  // dom操作",
      "  onMounted(() => {",
      "    // 52 = custom-input左右的padding(11*2) + connective-word左右的padding(10*2) + suffix的padding-left(10)",
      "    let countWidth =",
      "      (componentBox.value.clientWidth -",
      "        connectiveWord.value.clientWidth -",
      "        suffix.value.clientWidth -",
      "        (props.suffixText ? 52 : 42)) /",
      "      2;",
      "    inputWidth.value = countWidth + \"px\"; // input输入框的宽度",
      "    // 兼容中文输入。compositionstart：当用户使用拼音输入法开始输入汉字时，这个事件就会被触发",
      "    minNumRef.value.addEventListener(\"compositionstart\", () => {",
      "      flag.value = false;",
      "    });",
      "    minNumRef.value.addEventListener(\"compositionend\", () => {",
      "      flag.value = true;",
      "    });",
      "    maxNumRef.value.addEventListener(\"compositionstart\", () => {",
      "      flag.value = false;",
      "    });",
      "    maxNumRef.value.addEventListener(\"compositionend\", () => {",
      "      flag.value = true;",
      "    });",
      "  });",
      "</script>",
      "<template>",
      "  <div ref=\"componentBox\" class=\"scope-input-component\">",
      "    <div class=\"custom-input\">",
      "      <input",
      "        ref=\"minNumRef\"",
      "        type=\"text\"",
      "        :value=\"minNumValue\"",
      "        :maxlength=\"maxlength\"",
      "        @input=\"handleChange('minNum')\"",
      "        @focus=\"handleFocus\"",
      "        @blur=\"handleBlur\"",
      "      />",
      "      <span ref=\"connectiveWord\" class=\"connective-word\">{{ connector }}</span>",
      "      <input",
      "        ref=\"maxNumRef\"",
      "        type=\"text\"",
      "        :value=\"maxNumValue\"",
      "        :maxlength=\"maxlength\"",
      "        @input=\"handleChange('maxNum')\"",
      "        @focus=\"handleFocus\"",
      "        @blur=\"handleBlur\"",
      "      />",
      "      <div ref=\"suffix\" class=\"suffix\">",
      "        {{ suffixText }}",
      "      </div>",
      "    </div>",
      "    <div class=\"hint\">",
      "      <span v-if=\"isRule && isHint\">{{ hintText }}</span>",
      "    </div>",
      "  </div>",
      "</template>",
      "<style lang=\"less\" scoped>",
      "  .scope-input-component {",
      "    display: flex;",
      "    flex-wrap: wrap;",
      "    position: relative;",
      "    width: v-bind(boxWidth);",
      "    .custom-input {",
      "      &:hover {",
      "        box-shadow: 0 0 0 1px v-bind(shadowColor(\"hover\")) inset;",
      "      }",
      "      & {",
      "        box-shadow: 0 0 0 1px v-bind(shadowColor()) inset;",
      "      }",
      "      padding: 0 11px;",
      "      width: 100%;",
      "      display: flex;",
      "      align-items: center;",
      "      justify-content: space-between;",
      "      height: v-bind(sizeStyle);",
      "      border-radius: 4px;",
      "      input {",
      "        flex: 1;",
      "        width: v-bind(inputWidth);",
      "        border: none;",
      "        box-sizing: border-box;",
      "        outline: none;",
      "        color: #606266;",
      "        font-size: inherit;",
      "      }",
      "      .connective-word {",
      "        flex-shrink: 0;",
      "        font-size: 12px;",
      "        padding: 0 10px;",
      "      }",
      "      .suffix {",
      "        flex-shrink: 0;",
      "        padding-left: v-bind(suffixPadding);",
      "        font-size: 12px;",
      "        white-space: nowrap;",
      "      }",
      "    }",
      "    .hint {",
      "      position: absolute;",
      "      left: 0;",
      "      bottom: -15px;",
      "      line-height: 1;",
      "      font-size: 12px;",
      "      color: #f56c6c;",
      "    }",
      "  }",
      "</style>",
    ],
    "description": "vue3 + ts 范围输入组件"
  }
}
